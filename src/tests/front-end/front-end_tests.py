import unittest
import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.ui import Select


class AdminTest(unittest.TestCase):
    browsers = {
        "CHROME": True,
        "FIREFOX": False,
        "SAFARI": False
    }

    admin = {
        "email": ADD ADMIN EMAIL STRING,
        "password": ADD ADMIN PASSWORD STRING
    }

    sampleUser = {
        "email": "frontend.testuser@utwente.nl",
        "password": "FrontendTestPW0"
    }
    testCourse = {
        "coursename": "frontend-test",
        "info": "This course is automatically generated by frontend testing and should be deleted by the same test"
    }

    THEBIAS_PATH = "https://db.thebias.nl/dab"
    LOCAL_PATH = "http://localhost:8000/dab"
    PATH = THEBIAS_PATH

    counter = 0

    def setUp(self):
        return

    # Private methods #
    def __registerAccount(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.find_element_by_id("register-link").click()

        time.sleep(1)
        email_field = self.driver.find_element(By.ID, "register-email-field")
        email_field.click()
        email_field.clear()
        email_field.send_keys(self.sampleUser.get("email"))

        password_field = self.driver.find_element(By.ID, "register-password-field")
        password_field.click()
        password_field.clear()
        password_field.send_keys(self.sampleUser.get("password"))

        password_confirm_field = self.driver.find_element(By.ID, "register-password-confirm-field")
        password_confirm_field.click()
        password_confirm_field.clear()
        password_confirm_field.send_keys(self.sampleUser.get("password"))

        driver.find_element_by_id("register-button").click()

        self.__login()
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_users")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.sampleUser.get("email") + "')]").click()
        driver.find_element_by_id("delete-button").click()
        driver.find_element_by_xpath("/html/body/div[2]/div/div[3]/button[1]").click()
        self.__logout()

    def __login(self):
        driver = self.driver
        driver.get(self.PATH)
        self.assertIn("Login", driver.title)

        input_login_email = driver.find_element_by_id("email-input")
        input_login_email.send_keys(self.admin.get("email"))

        input_login_password = driver.find_element_by_id("password-input")
        input_login_password.send_keys(self.admin.get("password"))

        sign_in_button = driver.find_element_by_id("login-button")
        sign_in_button.send_keys(Keys.ENTER)

        WebDriverWait(driver, 10).until(
            EC.title_is("Admin Home")
        )
        assert "Admin Home" in driver.title

    def __logout(self):
        driver = self.driver
        log_out_button = driver.find_element_by_id("navbar-logout")
        log_out_button.submit()

        WebDriverWait(driver, 10).until(
            EC.title_is("Login")
        )
        assert "You have been logged out" in driver.page_source

    def __addCourse(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_courses")

        element = driver.find_element_by_id("new-course-pane")
        driver.execute_script("arguments[0].setAttribute('class','tab-pane active')", element)

        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "new-course-name-field"))
        )

        time.sleep(1)
        name_field = self.driver.find_element(By.ID, "new-course-name-field")
        name_field.click()
        name_field.clear()
        name_field.send_keys(self.testCourse.get("coursename"))

        info_field = self.driver.find_element(By.ID, "new-course-info-field")
        info_field.click()
        info_field.clear()
        info_field.send_keys(self.testCourse.get("info"))

        add_course_button = driver.find_element_by_id("add-course-button")
        add_course_button.click()

        time.sleep(3)

    def __deleteCourse(self):
        driver = self.driver

        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_courses")

        driver.implicitly_wait(10)

        driver.find_element_by_xpath("//*[contains(text(), '" + self.testCourse.get("coursename") + "')]").click()
        driver.find_element_by_id("delete-course-button").click()
        driver.find_element_by_xpath("/html/body/div[2]/div/div[3]/button[1]").click()
        time.sleep(3)

    def __editCourse(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_courses")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.testCourse.get("coursename") + "')]").click()
        time.sleep(1)

        info_field = self.driver.find_element(By.ID, "existing-course-info-field")
        info_field.click()
        info_field.clear()
        info_field.send_keys("edited test info")

        driver.find_element_by_id("edit-course-button").click()
        driver.find_element_by_xpath("/html/body/div[2]/div/div[3]/button[1]").click()

        time.sleep(3)

    def __resetDatabaseViaCourse(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_courses")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.testCourse.get("coursename") + "')]").click()

        driver.find_element_by_xpath("//*[contains(text(), '" + self.db_name + "')]").click()
        driver.find_element_by_xpath(
            "/html/body/div/div[2]/div/div[2]/div/div[2]/div[3]/div/div[11]/div[2]/div/div[7]/div[2]/button").click()
        driver.find_element_by_xpath("/html/body/div[2]/div/div[3]/button[1]").click()
        time.sleep(3)

    def __deleteDatabaseViaCourse(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_courses")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.testCourse.get("coursename") + "')]").click()

        driver.find_element_by_xpath("//*[contains(text(), '" + self.db_name + "')]").click()
        driver.find_element_by_xpath(
            "/html/body/div/div[2]/div/div[2]/div/div[2]/div[3]/div/div[11]/div[2]/div/div[7]/div[3]/button").click()
        driver.find_element_by_xpath("/html/body/div[2]/div/div[3]/button[1]").click()
        time.sleep(3)

    def __addTA(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_courses")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.testCourse.get("coursename") + "')]").click()
        driver.find_element_by_xpath("//*[contains(text(), '" + self.admin.get("email") + "')]").click()
        driver.find_element_by_id("user-ta-button").click()

        time.sleep(3)

    def __removeTA(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_courses")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.testCourse.get("coursename") + "')]").click()
        driver.find_element_by_xpath("//*[contains(text(), '" + self.admin.get("email") + "')]").click()
        driver.find_element_by_id("user-ta-button").click()
        time.sleep(3)

    def __changePassword(self):
        temp_pass = "TempPass123"
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/change_password")

        time.sleep(1)
        current_password_field = self.driver.find_element(By.ID, "old-password-field")
        current_password_field.click()
        current_password_field.clear()
        current_password_field.send_keys(self.admin.get("password"))

        new_password_field = self.driver.find_element(By.ID, "new-password-field")
        new_password_field.click()
        new_password_field.clear()
        new_password_field.send_keys(temp_pass)

        confirm_new_password_field = self.driver.find_element(By.ID, "confirm-password-field")
        confirm_new_password_field.click()
        confirm_new_password_field.clear()
        confirm_new_password_field.send_keys(temp_pass)

        driver.find_element_by_id("new-password-button").click()
        WebDriverWait(driver, 10).until(
            EC.title_is("Admin Home")
        )
        self.__logout()

        driver.get(self.PATH)
        self.assertIn("Login", driver.title)

        input_login_email = driver.find_element_by_id("email-input")
        input_login_email.send_keys(self.admin.get("email"))

        input_login_password = driver.find_element_by_id("password-input")
        input_login_password.send_keys(temp_pass)

        sign_in_button = driver.find_element_by_id("login-button")
        sign_in_button.send_keys(Keys.ENTER)

        WebDriverWait(driver, 10).until(
            EC.title_is("Admin Home")
        )

        driver.implicitly_wait(10)
        driver.get(self.PATH + "/change_password")

        time.sleep(1)
        current_password_field = self.driver.find_element(By.ID, "old-password-field")
        current_password_field.click()
        current_password_field.clear()
        current_password_field.send_keys(temp_pass)

        new_password_field = self.driver.find_element(By.ID, "new-password-field")
        new_password_field.click()
        new_password_field.clear()
        new_password_field.send_keys(self.admin.get("password"))

        confirm_new_password_field = self.driver.find_element(By.ID, "confirm-password-field")
        confirm_new_password_field.click()
        confirm_new_password_field.clear()
        confirm_new_password_field.send_keys(self.admin.get("password"))

        driver.find_element_by_id("new-password-button").click()
        WebDriverWait(driver, 10).until(
            EC.title_is("Admin Home")
        )

    def __editUserRole(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_users")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.sampleUser.get("email") + "')]").click()
        driver.find_element_by_id("edit-button").click()
        select = Select(driver.find_element_by_id("selected-role"))
        select.select_by_visible_text("Admin")
        driver.find_element_by_id("edit-button").click()
        driver.find_element_by_xpath("/html/body/div[2]/div/div[3]/button[1]").click()
        time.sleep(3)

    def __addUser(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_users")

        element = driver.find_element_by_id("add-user-pane")
        driver.execute_script("arguments[0].setAttribute('class','tab-pane active')", element)

        time.sleep(1)
        email_field = self.driver.find_element(By.ID, "add-user-email-field")
        email_field.click()
        email_field.clear()
        email_field.send_keys(self.sampleUser.get("email"))

        password_field = self.driver.find_element(By.ID, "add-user-password-field")
        password_field.click()
        password_field.clear()
        password_field.send_keys(self.sampleUser.get("password"))

        password_confirm_field = self.driver.find_element(By.ID, "add-user-password-confirm-field")
        password_confirm_field.click()
        password_confirm_field.clear()
        password_confirm_field.send_keys(self.sampleUser.get("password"))

        time.sleep(2)

        driver.find_element_by_id("add-user-button").click()
        time.sleep(3)

    def __deleteUser(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_users")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.sampleUser.get("email") + "')]").click()
        driver.find_element_by_id("delete-button").click()
        driver.find_element_by_xpath("/html/body/div[2]/div/div[3]/button[1]").click()
        time.sleep(5)

    def __resetDatabaseViaUser(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_users")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.admin.get("email") + "')]").click()
        driver.find_element_by_xpath("//*[contains(text(), '" + self.db_name + "')]").click()
        driver.find_element_by_xpath(
            "/html/body/div/div[2]/div/div[2]/div/div[2]/div[2]/div[2]/div[2]/div/div[1]/div[9]/div[2]/button").click()
        driver.find_element_by_xpath("/html/body/div[2]/div/div[3]/button[1]").click()
        time.sleep(3)

    def __deleteDatabaseViaUser(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/edit_users")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.admin.get("email") + "')]").click()
        driver.find_element_by_xpath("//*[contains(text(), '" + self.db_name + "')]").click()
        time.sleep(1)
        driver.find_element_by_xpath(
            "/html/body/div/div[2]/div/div[2]/div/div[2]/div[2]/div[2]/div[2]/div/div/div[9]/div[3]/button").click()
        driver.find_element_by_xpath("/html/body/div[2]/div/div[3]/button[1]").click()
        time.sleep(3)

    def __requestDatabase(self):
        driver = self.driver

        driver.implicitly_wait(10)
        driver.get(self.PATH + "/student_view")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.testCourse.get("coursename") + "')]").click()

        time.sleep(3)
        group_field = self.driver.find_element(By.ID, "group-input")
        group_field.send_keys("99")

        self.driver.find_element_by_id("credentials-button").click()

        self.db_name = "dab_" + self.testCourse.get("coursename") + "_" + str(self.counter)
        self.counter += 1
        time.sleep(10)

    def __resetDatabaseStudent(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/student_view")

        driver.find_element_by_xpath("//*[contains(text(), '" + self.testCourse.get("coursename") + "')]").click()

        driver.find_element_by_xpath(
            "/html/body/div/div[2]/div/div[2]/div/div[1]/div[3]/div/div[4]/div[2]/button").click()
        driver.find_element_by_xpath("/html/body/div[2]/div/div[3]/button[1]").click()
        time.sleep(3)

    def __deleteDatabaseStudent(self):
        driver = self.driver
        driver.implicitly_wait(10)
        driver.get(self.PATH + "/student_view")
        driver.find_element_by_xpath("//*[contains(text(), '" + self.testCourse.get("coursename") + "')]").click()

        driver.find_element_by_xpath(
            "/html/body/div/div[2]/div/div[2]/div/div[1]/div[3]/div/div[4]/div[1]/button").click()
        driver.find_element_by_xpath("/html/body/div[2]/div/div[3]/button[1]").click()
        time.sleep(3)

    def __iterateBrowsers(self, methods):
        self.driver = None
        for b in self.browsers:
            if self.browsers.get(b):
                if b == "CHROME":
                    self.driver = webdriver.Chrome()
                elif b == "FIREFOX":
                    self.driver = webdriver.Firefox()
                elif b == "SAFARI":
                    self.driver = webdriver.Safari()
                else:
                    print("SOMETHING WENT WRONG: NO DRIVER FOUND")
                self.driver.set_window_size(1900, 1017)

                for m in methods:
                    m()
                time.sleep(2)
                self.counter = 0
                self.driver.close()

    # Test Cases #
    def testLogin(self):
        methods = [
            self.__login,
            self.__logout
        ]
        self.__iterateBrowsers(methods)

    def testRegister(self):
        methods = [
            self.__registerAccount
        ]
        self.__iterateBrowsers(methods)

    def testChangePassword(self):
        methods = [
            self.__login,
            self.__changePassword,
            self.__logout
        ]
        self.__iterateBrowsers(methods)

    def testAddUser(self):
        methods = [
            self.__login,
            self.__addUser,
            self.__editUserRole,
            self.__deleteUser,
            self.__logout
        ]
        self.__iterateBrowsers(methods)

    def testCoursesAndDatabases(self):
        methods = [
            self.__login,
            self.__addCourse,

            self.__requestDatabase,
            self.__resetDatabaseStudent,
            self.__deleteDatabaseStudent,

            self.__editCourse,
            self.__addTA,
            self.__removeTA,

            self.__requestDatabase,
            self.__resetDatabaseViaUser,
            self.__deleteDatabaseViaUser,

            self.__requestDatabase,
            self.__resetDatabaseViaCourse,
            self.__deleteDatabaseViaCourse,

            self.__deleteCourse,
            self.__logout
        ]
        self.__iterateBrowsers(methods)

    def tearDown(self):
        return


if __name__ == "__main__":
    unittest.main()

